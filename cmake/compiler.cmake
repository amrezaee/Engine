# Compiler Detection

# Compiler
if(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    set(ENGINE_COMPILER_APPLE_CLANG TRUE)

    # cmake 2.26+ does this by default for AppleClang, GCC and MSVC
    if((NOT DEFINED CMAKE_CXX_COMPILER_FRONTEND_VARIANT) OR (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL ""))
        set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")
    endif()

elseif(CMAKE_CXX_COMPILER_ID STREQUAL "IBMClang")
    set(ENGINE_COMPILER_IBM_CLANG TRUE)

elseif(CMAKE_CXX_COMPILER_ID STREQUAL "ARMClang")
    set(ENGINE_COMPILER_ARM_CLANG TRUE)

elseif(CMAKE_CXX_COMPILER_ID STREQUAL "ARMCC")
    set(ENGINE_COMPILER_ARM TRUE)

elseif(CMAKE_CXX_COMPILER_ID STREQUAL "NVIDIA")
    set(ENGINE_COMPILER_CUDA TRUE)

elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")

    if(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
        set(ENGINE_COMPILER_CLANG_CL TRUE)

    elseif(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU")
        set(ENGINE_COMPILER_CLANG TRUE)
    endif()

elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(ENGINE_COMPILER_GCC TRUE)

    if((NOT DEFINED CMAKE_CXX_COMPILER_FRONTEND_VARIANT) OR (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL ""))
        set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")
    endif()

elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set(ENGINE_COMPILER_MSVC TRUE)

    if((NOT DEFINED CMAKE_CXX_COMPILER_FRONTEND_VARIANT) OR (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL ""))
        set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "MSVC")
    endif()

else()
    message(FATAL_ERROR "Unknown Compiler")
endif()

# Compiler Version
string(REPLACE "." ";" VERSION_LIST ${CMAKE_CXX_COMPILER_VERSION})
list(GET VERSION_LIST 0 VERSION_MAJOR)
list(GET VERSION_LIST 1 VERSION_MINOR)
list(GET VERSION_LIST 2 VERSION_PATCH)

# Compiler Variant
if(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
    set(ENGINE_COMPILER_MSVC_VARIANT TRUE)
    math(EXPR VERSION_CALCULATED "${VERSION_MAJOR} * 100 + ${VERSION_MINOR}")

elseif(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU")
    set(ENGINE_COMPILER_GCC_VARIANT TRUE)
    math(EXPR VERSION_CALCULATED "${VERSION_MAJOR} * 100 + ${VERSION_MINOR} * 10 + ${VERSION_PATCH}")
endif()

function(define_compiler_info target)
    target_compile_definitions(${target} PRIVATE
                               ENGINE_COMPILER_APPLE_CLANG=$<BOOL:${ENGINE_COMPILER_APPLE_CLANG}>
                               ENGINE_COMPILER_IBM_CLANG=$<BOOL:${ENGINE_COMPILER_IBM_CLANG}>
                               ENGINE_COMPILER_ARM_CLANG=$<BOOL:${ENGINE_COMPILER_ARM_CLANG}>
                               ENGINE_COMPILER_ARM=$<BOOL:${ENGINE_COMPILER_ARM}>
                               ENGINE_COMPILER_CUDA=$<BOOL:${ENGINE_COMPILER_CUDA}>
                               ENGINE_COMPILER_CLANG_CL=$<BOOL:${ENGINE_COMPILER_CLANG_CL}>
                               ENGINE_COMPILER_CLANG=$<BOOL:${ENGINE_COMPILER_CLANG}>
                               ENGINE_COMPILER_GCC=$<BOOL:${ENGINE_COMPILER_GCC}>
                               ENGINE_COMPILER_MSVC=$<BOOL:${ENGINE_COMPILER_MSVC}>

                               ENGINE_COMPILER_VERSION=${VERSION_CALCULATED}
                               )
endfunction()

message(STATUS "-COMPILER         = ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "-COMPILER VARIANT = ${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}")
message(STATUS "-COMPILER VERSION = ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "-COMPILER INT VER = ${VERSION_CALCULATED}")
